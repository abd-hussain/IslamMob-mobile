name: CI/CD Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      runner_type:
        description: 'Choose runner type'
        required: true
        default: 'github-hosted'
        type: choice
        options:
          - github-hosted
          - self-hosted

jobs:
  # android:
  #   runs-on: ubuntu-latest

  #   steps:
  #       - name: üìö Git Checkout
  #         uses: actions/checkout@v4

  #       - name: üî• Set Up Java
  #         uses: actions/setup-java@v4
  #         with:
  #           distribution: 'oracle'
  #           java-version: '17'

  #       - name: üîé Clean Gradle Cache (optional)
  #         run: rm -rf ~/.gradle/caches

  #       - name: üê¶ Setup Flutter
  #         uses: subosito/flutter-action@v2
  #         with:
  #           flutter-version: '3.32.6'
  #           channel: 'stable'
  #           cache: true

  #       - name: üó≥Ô∏è Flutter gen-l10n
  #         run: flutter gen-l10n

  #       - name: üó≥Ô∏è Flutter Pub Get
  #         run: flutter pub get

  #       - name: üóÉÔ∏è Generate code (Optional)
  #         run: flutter pub run build_runner build --delete-conflicting-outputs
            
  #       - name: üîë Set up key.properties
  #         env:
  #           ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
  #           ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
  #           ANDROID_KEY_CONTENT: ${{ secrets.ANDROID_KEY_CONTENT }}
  #         run: |
  #           if [ -n "$ANDROID_KEY_PASSWORD" ] && [ -n "$ANDROID_KEY_ALIAS" ] && [ -n "$ANDROID_KEY_CONTENT" ]; then
  #             echo "keyPassword=$ANDROID_KEY_PASSWORD" > android/key.properties
  #             echo "storePassword=$ANDROID_KEY_PASSWORD" >> android/key.properties
  #             echo "keyAlias=$ANDROID_KEY_ALIAS" >> android/key.properties
  #             echo "$ANDROID_KEY_CONTENT" | base64 --decode > android/androidkeystore.jks
  #             # Optional test command to verify file creation (do not log file content directly for security)
  #             ls -la android/ # Check if androidkeystore.jks file is generated
  #           else
  #             echo "Warning: Android signing secrets not found. Skipping key setup."
  #           fi
            
  #       - name: üîë Set up local.properties
  #         run: |
  #           echo "flutter.sdk=$FLUTTER_ROOT" > android/local.properties
  #           echo "sdk.dir=$ANDROID_SDK_ROOT" >> android/local.properties

  #       - name: üîë Set up Play Store Secret
  #         env:
  #           PLAY_STORE_SECRET: ${{ secrets.PLAY_STORE_SECRET }}
  #         run: |
  #           if [ -n "$PLAY_STORE_SECRET" ]; then
  #             echo "$PLAY_STORE_SECRET" | base64 --decode > android/play_store_secret.json
  #           else
  #             echo "Warning: Play Store secret not found. Skipping Play Store setup."
  #           fi

  #       - name: üéØ Setup Fastlane
  #         uses: ruby/setup-ruby@v1
  #         with:
  #             ruby-version: 3.3
  #             rubygems: latest

  #       - name: üîé Cleaning cash before we start
  #         run: |
  #             flutter clean
  #             rm -rf ~/.pub-cache
  #             rm -rf pubspec.lock
  #             rm -rf $HOME/.gradle/caches
  #             flutter pub get

  #       - name: üîç Dump full dependency tree
  #         run: flutter pub deps --style=compact

  #       - name: üõ†Ô∏è Build and Deploy
  #         run: |
  #             make deploy-android

  ios:
    runs-on: ${{ github.event.inputs.runner_type == 'self-hosted' && 'self-hosted' || 'macos-15' }}

    steps:
        - name: üìö Set up git and fetch all history for all branches and tags
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: üß∞ Finalize Xcode components
          run: |
            sudo xcode-select -s /Applications/Xcode_16.app
            sudo xcodebuild -runFirstLaunch
  
        - name: üß™ Check Xcode Version
          run: xcodebuild -version

        - name: üê¶ Setup Flutter
          uses: subosito/flutter-action@v2
          with:
            flutter-version: '3.32.6'
            channel: 'stable'
            cache: true

        - name: üó≥Ô∏è Flutter gen-l10n
          run: flutter gen-l10n

        - name: üó≥Ô∏è Flutter Pub Get
          run: flutter pub get
  
        - name: üóÉÔ∏è Generate code (Optional)
          run: flutter pub run build_runner build --delete-conflicting-outputs

        - name: üß∞ Set up App Store Connect (place where Fastlane expects it)
          env:
            APPSTORE_CONNECT: ${{ secrets.APPSTORE_CONNECT }}
          run: |
            if [ -n "$APPSTORE_CONNECT" ]; then
              mkdir -p ios/fastlane
              echo "$APPSTORE_CONNECT" | base64 --decode > ios/app_store_connect.json
            else
              echo "Warning: App Store Connect secret not found. Skipping App Store setup."
            fi

        # - name: üéØ Setup Fastlane
        #   uses: ruby/setup-ruby@v1
        #   with:
        #     ruby-version: 3.3
        #     rubygems: latest
        
        - name: üéØ Setup Ruby
          uses: ruby/setup-ruby@v1
          with:
            ruby-version: '3.2'
            bundler-cache: true   # will cache gems in the runner toolcache
          env:
            RUNNER_TOOL_CACHE: /Users/runner/hostedtoolcache
            RUNNER_TEMP: /Users/runner/work/_temp
  
        - name: üì¶ Install fastlane (no global writes)
          run: |
            gem install fastlane --no-document
            ruby -v
            which ruby
            fastlane -v

        # ‚úÖ Wire xcconfigs BEFORE pods
        - name: üß© Ensure Flutter xcconfigs include Pods
          run: |
           ensure_line () { FILE="$1"; LINE="$2"; grep -qF "$LINE" "$FILE" || echo "$LINE" >> "$FILE"; }
           ensure_line ios/Flutter/Debug.xcconfig   '#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"'
           ensure_line ios/Flutter/Release.xcconfig '#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"'
           ensure_line ios/Flutter/Profile.xcconfig '#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"'
        
        # - name: üîé Debug env & perms
        #   run: |
        #     id
        #     echo "HOME=$HOME"
        #     ls -ld /Users /Users/runner || true
        #     ls -ld /Users/runner/hostedtoolcache || true
          
        - name: üßπ Pods clean install
          run: |
            pushd ios
            pod deintegrate
            rm -f Podfile.lock
            pod install
            popd

        - name: üîÄ Select Xcode with iPhoneOS SDK
          shell: bash
          run: |
            set -euo pipefail
        
            choose_xcode() {
              for X in "$@"; do
                DS="$X/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport"
                SDK="$X/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iphoneos.sdk"
                [[ -d "$SDK" ]] || continue
        
                # Debug to STDERR only:
                >&2 echo "Checking $X"
                [[ -d "$DS" ]] && >&2 ls "$DS" | tail -5 || true
        
                # Prefer an SDK that reports iOS 18 (fallback to any iOS SDK present)
                if /usr/libexec/PlistBuddy -c 'Print :DTPlatformVersion' "$SDK/SDKSettings.plist" 2>/dev/null | grep -q '^18'; then
                  echo "$X"; return 0
                fi
                # fallback acceptable
                echo "$X"; return 0
              done
              return 1
            }
        
            PICK="$(choose_xcode \
              /Applications/Xcode_16.4.app \
              /Applications/Xcode_16.3.app \
              /Applications/Xcode_16.2.app \
              /Applications/Xcode_16.1.app \
              /Applications/Xcode_16.app \
              /Applications/Xcode.app)"
        
            if [[ -z "$PICK" ]]; then
              echo "‚ùå No suitable Xcode found" >&2
              exit 1
            fi
        
            echo "Using Xcode: $PICK" >&2
            echo "DEVELOPER_DIR=$PICK/Contents/Developer" >> "$GITHUB_ENV"
        
            # Sanity:
            xcodebuild -version
            xcodebuild -showsdks || true

        - name: üß™ Pre-warm xcodebuild & validate scheme
          run: |
            xcodebuild -version
            xcodebuild -list -workspace ios/Runner.xcworkspace
            xcodebuild -resolvePackageDependencies \
              -workspace ios/Runner.xcworkspace \
              -scheme Runner \
              -destination 'generic/platform=iOS'
          
        - name: üõ†Ô∏è Build and Deploy
          env:
            MATCH_PASSWORD: ${{ secrets.IOS_MATCH_PASSWORD }}
            MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.GIT_BASIC_AUTHORIZATION }}
            FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: "120"
            FASTLANE_XCODEBUILD_SETTINGS_RETRIES: "6"
          run: |
            if [ -n "$MATCH_PASSWORD" ] && [ -n "$MATCH_GIT_BASIC_AUTHORIZATION" ]; then
              make deploy-ios
            else
              echo "Warning: iOS deployment secrets not found. Skipping iOS deployment."
              exit 1
            fi

  